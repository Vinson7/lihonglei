【requireJs】
最早的时候，所有Javascript代码都写在一个文件里面，只要加载这一个文件就够了。后来，代码越来越多，一个文件不够了，必须分成多个文件，依次加载。下面的网页代码，相信很多人都见过。
　　<script src="1.js"></script>
　　<script src="2.js"></script>
　　<script src="3.js"></script>
　　<script src="4.js"></script>
　　<script src="5.js"></script>
　　<script src="6.js"></script>

这段代码依次加载多个js文件。

这样的写法有很大的缺点。1、加载的时候，浏览器会停止网页渲染，加载文件越多，网页失去响应的时间就会越长；
                     2、由于js文件之间存在依赖关系，因此必须严格保证加载顺序（比如上例的1.js要在2.js的前面），依赖性最大的模块一定要放到最后加载（6号依赖54321）

requirejs：作用（1）实现js文件的异步加载，避免网页失去响应；
              （2）管理模块之间的依赖性，便于代码的编写和维护。——我觉得这个才是有真正的价值

1、导入requirejs文件和主模块：而且为了requirejs文件本身不会阻碍网页加载(requirejs文件本身也是js，也会发生同步加载)，所以才去如下 defer async="true";或者写在网页底部
假设所有的js都在js/路径下，模块就是一个功能js文件
<script data-main="scripts/main.js" src="scripts/require.js" defer async="true"></script>
(1)data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。
主模块像C语言的main()函数，所有代码都从这儿开始运行；主模块一般依赖于其他模块（否则没有必要用requirejs了），这时就要使用AMD规范定义的的require()函数。
main.js:
require(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){

　　　　// some code here

　　});
(2)baseUrl：这是一个用来加载所有js的基础url，一般与上面的data-main路径是一致的
(3)<script data-main="scripts/main.js" src="scripts/require.js" defer async="true"></script>中的main.js中所引用的js 是异步的，但是无法保证其它的js的引入是异步的：
即：
    <script data-main="scripts/main" src="scripts/require.js"></script>
    <script src="scripts/other.js"></script>
    other.js文件无法保证是能够加载成功的！！！

2、模块
定义方式：
（1）json定义
define({
        color: "black",
        size: "unisize"
});
（2）函数式定义——返回对象
define(function () {
    //Do setup work here
    return {
        color: "black",
        size: "unisize"
    }
});
（3）存在依赖的函数——返回对象(第一个参数是数组，第二个是函数，且参数正是数组注入的对象)
define(["./cart", "./inventory"], function(cart, inventory) {
        //return an object to define the "my/shirt" module.
        return {
            color: "blue",
            size: "large",
            addToCart: function() {
                inventory.decrement(this);
                cart.add(this);
            }
        }
    }
);
（4）存在依赖的函数——返回函数
define(["my/cart", "my/inventory"],
    function(cart, inventory) {
        //return a function to define "foo/title".
        //It gets or sets the window title.
        return function(title) {
            return title ? (window.title = title) :
                   inventory.storeName + ' ' + cart.name;
        }
    }
);











